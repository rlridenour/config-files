#+title: Emacs Configuration
#+author: Randy Ridenour
#+email: rlridenour@gmail.com
#+auto_tangle: t



* Early init file
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

#+begin_src emacs-lisp
  ;; early-init.el -*- lexical-binding: t; -*-
  ;; NOTE: early-init.el is generated from README.org.  Please edit that file instead.
#+end_src

Defer garbage collection.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

Improve execution speed.

#+begin_src emacs-lisp
  (customize-set-variable 'native-comp-speed 2)
  (customize-set-variable 'native-comp-deferred-compilation t)
#+end_src

Prevent Emacs from initializing packages.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src


#+begin_src emacs-lisp
    (setq user-full-name "Randy Ridenour"
	  user-mail-address "rlridenour@gmail.com")
#+end_src

#+begin_src emacs-lisp
    ;; Silence the "Package cl is deprecated" warning.
    (setq byte-compile-warnings '(cl-functions))
#+end_src

  #+begin_src emacs-lisp
	;; Silence native compilation warnings
	(setq native-comp-async-report-warnings-errors nil)
	(setq warning-minimum-level :error)
	;; Code
#+end_src

#+begin_src emacs-lisp
	;; compile elisp
	(when (fboundp 'native-compile-async)
	    (setq comp-deferred-compilation t
		  comp-deferred-compilation-black-list '("/mu4e.*\\.el$")))
#+end_src

	Remove unnecessary GUI elements.

#+begin_src emacs-lisp
	  ;; (push '(menu-bar-lines . 0) default-frame-alist)
	  ;; (push '(tool-bar-lines . 0) default-frame-alist)
	  ;; (push '(vertical-scroll-bars) default-frame-alist)

	  (tool-bar-mode -1)
	  (scroll-bar-mode -1)
	  (tooltip-mode -1)
	  (setq-default frame-inhibit-implied-resize t)
	  (setq-default inhibit-startup-screen t)
	  (setq-default inhibit-startup-message t)
	  (setq-default inhibit-splash-screen t)
	  (setq-default initial-scratch-message nil)
	  (setq use-dialog-box nil)
#+end_src

Set the frame title format.

#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil
		frame-title-format '("%f [%m]"))
#+end_src



Set initial mode to org-mode.

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

Increase font size.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 160)
#+end_src

#+begin_src emacs-lisp
  ;; Local Variables:
  ;; no-byte-compile: t
  ;; no-native-compile: t
  ;; no-update-autoloads: t
  ;; End:
#+end_src

* Variables
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
  ;;; init.el --- Personal Emacs configuration file -*- lexical-binding: t; -*-
  ;; NOTE: init.el is generated from README.org.  Please edit that file instead
#+end_src

#+begin_src emacs-lisp
  (defconst rr-emacs-dir (expand-file-name user-emacs-directory)
    "The path to the emacs.d directory.")
#+end_src

Set directory for Emacs activity files.

#+begin_src emacs-lisp
  (defconst rr-cache-dir "~/.cache/emacs/"
    "The directory for Emacs activity files.")
#+end_src

Set directory for backup files.

#+begin_src emacs-lisp
  (defconst rr-backup-dir (concat rr-cache-dir "backup/")
    "The directory for Emacs backup files.")
#+end_src

Set directory for org files.

#+begin_src emacs-lisp
  (defconst rr-org-dir "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/org/"
    "The directory for my org files.")
#+end_src


#+begin_src emacs-lisp
  (defconst rr-agenda-dir "/Users/rlridenour/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"
    "The directory for RR-Emacs note storage.")
#+end_src

Set directory for notes.

#+begin_src emacs-lisp
  (defconst rr-notes-dir "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/Documents/notes/"
    "The directory for RR-Emacs note storage.")
#+end_src

Create cache and backup directories.

#+begin_src emacs-lisp
  ;;;; Create directories if non-existing
  (dolist (dir (list rr-cache-dir
		     rr-backup-dir))
    (unless (file-directory-p dir)
      (make-directory dir t)))
#+end_src

* Package Management
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Straight

Boostrap ~straight.el~.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Replace use-package with straight-use-package

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

Ensure that system utilities required by various packages are installed.
#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)
#+end_src

Allow key chords in use-package bindings.

#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src

** Org Auto Tangle

Use ~org-auto-tangle~ to generate ~early-init.el~ and ~init.el~ whenever ~README.org~ is saved.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** General

Install General now so that it can be used to bind keys in use-package declarations.

#+begin_src emacs-lisp
  (use-package general :demand t
    :config
    (general-auto-unbind-keys))
#+end_src


* Default Settings
:PROPERTIES:
:header-args: :tangle init.el
:END:



Set path from shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize))
#+end_src




Kill message buffer on exit.

#+begin_src emacs-lisp
  (setq message-kill-buffer-on-exit t)
#+end_src

Use "y" and "n" in confirmation dialogs.

#+begin_src emacs-lisp
  (setf use-short-answers t)
#+end_src

Allow entering a command when the minibuffer is active.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

Open links in default Mac browser.

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+end_src

** Help

*** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src


* Tools
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Magit

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :config
  (global-auto-revert-mode)
  (setq magit-refresh-status-buffer nil
	magit-diff-highlight-indentation nil
	magit-diff-highlight-trailing nil
	magit-diff-paint-whitespace nil
	magit-diff-highlight-hunk-body nil
	magit-diff-refine-hunk nil
	magit-revision-insert-related-refs nil)
	    :commands
    (magit-after-save-refresh-status)
    :hook
    (after-save . magit-after-save-refresh-status)
    :custom
    (transient-history-file
     (expand-file-name "transient/history.el" rr-cache-dir))
    (transient-levels-file
     (expand-file-name "transient/levels.el" rr-cache-dir))
    (transient-values-file
     (expand-file-name "transient/values.el" rr-cache-dir)))
#+end_src

* Finish
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
  ;; Local Variables:
  ;; no-byte-compile: t
  ;; no-native-compile: t
  ;; no-update-autoloads: t
  ;; End:
#+end_src
